#+TITLE: Todo:
how to process if ... else..
bool type

#+TITLE: semant.c
1.if(initType->kind != decType->kind);

2. transExp -> actual_ty ,
   must be Ty_int,Ty_string,Ty_array(not acutal type),Ty_record

3. transDec A_varDec -> E_VarEntry(decType(non-acutal_ty)/initType(acutal_ty));
   transDec A_funtionDec -> E_FunEntry(formals Ty_tyList-non-actual-ty,
                                 result Ty_ty-non-actual-ty)
   transDec A_typeDec -> Ty_Name <-> Ty_Name
                      -> Ty_Name <-> Non-Ty-Name

4.1 type Int2 : Int1 , type Int1 : int , var age : Int2

4.2 type struct2 : struct1,
       type struct1 : {name:string,tail:struct2};
           var ins : struct2 = nil / struct2{...} / struct1{...}

5 transVar to A_simpleVar ,return actual_ty
    such as var age : int' ,return int(actual_ty of int')
  transVar to A_fieldVar{u.field.var,u.field.sym}
       type Person : {inf:Inf',other:Other'}
       type Inf: {age:int,name,string}
       type Other: {...}
          var person:Person' = {...} then person.inf.age
  transVar to A_subsciptVar{u.subscript.var,u.subscript.exp},
    such as type intA : array of int'
            var int_arr:intA'' := intA'[10] of 0
    then int_arr[9] the ty of return is int(acutal_ty of int')

6 transExp:
need to improve to support ...
...for(d = a->u.let.decs;d;d=d->tail){
...      transDec(venv,tenv,d->head);
...    }
...A_SeqExp(a->pos,a->u.let.body) return last statement;
...A_arrayExp var intArr : iArr := iArr[10] of 1





### do
how to compare a type
1.List : int , List
2.C : int , C

actual_ty -> Ty_int Ty_string Ty_nil Ty_void
          Ty_record Ty_array -> Ty_array
                             -> int,string,record...

assertSame(ty1==ty2)
var arr:arr2 := arr2 [10] of 10
arr := arr2 [10] of 10
ar := ttt[10]



///334




#+Title: chap7
//examine nil before record.fields





Nx:if(no-return), A_whileExp,
     A_forExp A_breakExp  A_seqExp




Ex:A_varExp A_intExp A_stringExp
  A_callExp A_assignExp A_ifExp
  A_nilExp  A_arrayExp A_recordExp



Cx:relOp

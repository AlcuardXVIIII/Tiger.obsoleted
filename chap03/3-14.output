Rules useless in parser due to conflicts

    8 be: ID


State 5 conflicts: 5 reduce/reduce
State 12 conflicts: 2 shift/reduce
State 14 conflicts: 1 shift/reduce


Grammar

    0 $accept: stm $end

    1 stm: ID ASSIGN ae
    2    | ID ASSIGN be

    3 ae: be OR be
    4   | be AND be
    5   | ae EQUAL ae
    6   | ID

    7 be: ae PLUS ae
    8   | ID


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 1 2 6 8
ASSIGN (259) 1 2
OR (260) 3
AND (261) 4
EQUAL (262) 5
PLUS (263) 7


Nonterminals, with rules where they appear

$accept (9)
    on left: 0
stm (10)
    on left: 1 2, on right: 0
ae (11)
    on left: 3 4 5 6, on right: 1 5 7
be (12)
    on left: 7 8, on right: 2 3 4


State 0

    0 $accept: . stm $end

    ID  shift, and go to state 1

    stm  go to state 2


State 1

    1 stm: ID . ASSIGN ae
    2    | ID . ASSIGN be

    ASSIGN  shift, and go to state 3


State 2

    0 $accept: stm . $end

    $end  shift, and go to state 4


State 3

    1 stm: ID ASSIGN . ae
    2    | ID ASSIGN . be

    ID  shift, and go to state 5

    ae  go to state 6
    be  go to state 7


State 4

    0 $accept: stm $end .

    $default  accept


State 5

    6 ae: ID .
    8 be: ID .

    $end      reduce using rule 6 (ae)
    $end      [reduce using rule 8 (be)]
    OR        reduce using rule 6 (ae)
    OR        [reduce using rule 8 (be)]
    AND       reduce using rule 6 (ae)
    AND       [reduce using rule 8 (be)]
    EQUAL     reduce using rule 6 (ae)
    EQUAL     [reduce using rule 8 (be)]
    PLUS      reduce using rule 6 (ae)
    PLUS      [reduce using rule 8 (be)]
    $default  reduce using rule 6 (ae)


State 6

    1 stm: ID ASSIGN ae .
    5 ae: ae . EQUAL ae
    7 be: ae . PLUS ae

    EQUAL  shift, and go to state 8
    PLUS   shift, and go to state 9

    $default  reduce using rule 1 (stm)


State 7

    2 stm: ID ASSIGN be .
    3 ae: be . OR be
    4   | be . AND be

    OR   shift, and go to state 10
    AND  shift, and go to state 11

    $default  reduce using rule 2 (stm)


State 8

    5 ae: ae EQUAL . ae

    ID  shift, and go to state 5

    ae  go to state 12
    be  go to state 13


State 9

    7 be: ae PLUS . ae

    ID  shift, and go to state 5

    ae  go to state 14
    be  go to state 13


State 10

    3 ae: be OR . be

    ID  shift, and go to state 5

    ae  go to state 15
    be  go to state 16


State 11

    4 ae: be AND . be

    ID  shift, and go to state 5

    ae  go to state 15
    be  go to state 17


State 12

    5 ae: ae . EQUAL ae
    5   | ae EQUAL ae .
    7 be: ae . PLUS ae

    EQUAL  shift, and go to state 8
    PLUS   shift, and go to state 9

    EQUAL     [reduce using rule 5 (ae)]
    PLUS      [reduce using rule 5 (ae)]
    $default  reduce using rule 5 (ae)


State 13

    3 ae: be . OR be
    4   | be . AND be

    OR   shift, and go to state 10
    AND  shift, and go to state 11


State 14

    5 ae: ae . EQUAL ae
    7 be: ae . PLUS ae
    7   | ae PLUS ae .

    EQUAL  shift, and go to state 8

    EQUAL     [reduce using rule 7 (be)]
    $default  reduce using rule 7 (be)


State 15

    5 ae: ae . EQUAL ae
    7 be: ae . PLUS ae

    EQUAL  shift, and go to state 8
    PLUS   shift, and go to state 9


State 16

    3 ae: be . OR be
    3   | be OR be .
    4   | be . AND be

    AND  shift, and go to state 11

    $default  reduce using rule 3 (ae)


State 17

    3 ae: be . OR be
    4   | be . AND be
    4   | be AND be .

    $default  reduce using rule 4 (ae)

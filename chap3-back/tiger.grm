%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE

%right THEN ELSE

%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%start program

%%
           
program: exp
           

lvalue: ID
   | lvalue DOT ID
   | lvalue LBRACK exp RBRACK
   ;

              
exp: varExp
   | nilExp
   | intExp
   | stringExp
   | binaryOpExp
   | unaryOpExp
   | callExp
   | seqExp
   | assignExp
   | recordCreateExp
   | arrayCreateExp
   | ifExp
   | whileExp
   | forExp
   | breakExp
   | letExp
   ;

varExp: lvalue
nilExp: NIL
intExp: INT
stringExp: STRING
callExp: ID LPAREN argList RPAREN

argList:
       | exp argList_
argList_:
        | COMMA exp argList_
        ;

binaryOpExp: exp PLUS exp
     | exp MINUS exp
     | exp TIMES exp
     | exp DIVIDE exp
     | exp EQ exp
     | exp NEQ exp
     | exp LT exp
     | exp LE exp
     | exp GT exp
     | exp GE exp
     | exp AND exp
     | exp OR exp
     ;
unaryOpExp: MINUS exp %prec UMINUS
//---------------------------------------------
recordCreateExp: ID LBRACE efieldList RBRACE /* human {name="",age=13} */
efield: ID EQ exp
efieldList: /* EMPTY */
          | efield efieldList_
efieldList_:
           | COMMA efield efieldList_

//---------------------------------------------
seqExp: LPAREN seqList RPAREN
seqList: exp
       | exp SEMICOLON seqList
       ;

assignExp: lvalue ASSIGN exp

ifExp: IF exp THEN exp ELSE exp
     | IF exp THEN exp
     ;

whileExp: WHILE exp DO exp

forExp: FOR ID ASSIGN exp TO exp DO exp

breakExp: BREAK

letExp: LET decs IN seqList END
//--------------------------------------------
arrayCreateExp: ID LBRACK exp RBRACK OF exp /* int[5] of 1 */
//--------------------------------------------
decs: dec
    | dec decs

dec: funcdec
   | vardec
   | tydec
   ;

tydec: nametyList
nametyList: nameTy
          | nameTy nametyList
nameTy: TYPE ID EQ ID
      | TYPE ID EQ LBRACE fieldList RBRACE
      | TYPE ID EQ ARRAY OF ID


field: ID COLON ID
fieldList:
         | field fieldList_
fieldList_:
          | COMMA field fieldList_
          ;

funcdec: functydecList

functydecList: functydec
             | functydec functydecList

functydec: FUNCTION ID LPAREN fieldList RPAREN COLON ID EQ exp
      | FUNCTION ID LPAREN fieldList RPAREN EQ exp
      ;


vardec: VAR ID ASSIGN exp
      | VAR ID COLON ID ASSIGN exp

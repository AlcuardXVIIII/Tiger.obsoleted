State 1 conflicts: 1 shift/reduce
State 46 conflicts: 1 shift/reduce
State 50 conflicts: 1 shift/reduce
State 110 conflicts: 13 shift/reduce
State 111 conflicts: 12 shift/reduce
State 135 conflicts: 12 shift/reduce
State 137 conflicts: 12 shift/reduce
State 154 conflicts: 12 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 lvalue: ID
    3       | lvalue DOT ID
    4       | lvalue LBRACK exp RBRACK

    5 exp: varExp
    6    | nilExp
    7    | intExp
    8    | stringExp
    9    | binaryOpExp
   10    | unaryOpExp
   11    | callExp
   12    | seqExp
   13    | assignExp
   14    | recordCreateExp
   15    | arrayCreateExp
   16    | ifExp
   17    | whileExp
   18    | forExp
   19    | breakExp
   20    | letExp

   21 varExp: lvalue

   22 nilExp: NIL

   23 intExp: INT

   24 stringExp: STRING

   25 callExp: ID LPAREN argList RPAREN

   26 argList: %empty
   27        | exp argList_

   28 argList_: %empty
   29         | COMMA exp argList_

   30 binaryOpExp: exp PLUS exp
   31            | exp MINUS exp
   32            | exp TIMES exp
   33            | exp DIVIDE exp
   34            | exp EQ exp
   35            | exp NEQ exp
   36            | exp LT exp
   37            | exp LE exp
   38            | exp GT exp
   39            | exp GE exp
   40            | exp AND exp
   41            | exp OR exp

   42 unaryOpExp: MINUS exp

   43 recordCreateExp: ID LBRACE efieldList RBRACE

   44 efield: ID EQ exp

   45 efieldList: %empty
   46           | efield efieldList_

   47 efieldList_: %empty
   48            | COMMA efield efieldList_

   49 seqExp: LPAREN seqList RPAREN

   50 seqList: exp
   51        | exp SEMICOLON seqList

   52 assignExp: lvalue ASSIGN exp

   53 ifExp: IF exp THEN exp ELSE exp
   54      | IF exp THEN exp

   55 whileExp: WHILE exp DO exp

   56 forExp: FOR ID ASSIGN exp TO exp DO exp

   57 breakExp: BREAK

   58 letExp: LET decs IN seqList END

   59 arrayCreateExp: ID LBRACK exp RBRACK OF exp

   60 decs: dec
   61     | dec decs

   62 dec: funcdec
   63    | vardec
   64    | tydec

   65 funcdec: funcdecList

   66 funcdecList: funcdec_
   67            | funcdec_ funcdecList

   68 funcdec_: FUNCTION ID LPAREN fieldList RPAREN COLON ID EQ exp
   69         | FUNCTION ID LPAREN fieldList RPAREN EQ exp

   70 vardec: VAR ID ASSIGN exp
   71       | VAR ID COLON ID ASSIGN exp

   72 tydec: nametyList

   73 nametyList: namety
   74           | namety nametyList

   75 namety: TYPE ID EQ ID
   76       | TYPE ID EQ LBRACE fieldList RBRACE
   77       | TYPE ID EQ ARRAY OF ID

   78 field: ID COLON ID

   79 fieldList: %empty
   80          | field fieldList_

   81 fieldList_: %empty
   82           | COMMA field fieldList_


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 2 3 25 43 44 56 59 68 69 70 71 75 76 77 78
STRING (259) 24
INT (260) 23
COMMA (261) 29 48 82
COLON (262) 68 71 78
SEMICOLON (263) 51
LPAREN (264) 25 49 68 69
RPAREN (265) 25 49 68 69
LBRACK (266) 4 59
RBRACK (267) 4 59
LBRACE (268) 43 76
RBRACE (269) 43 76
DOT (270) 3
ASSIGN (271) 52 56 70 71
ARRAY (272) 77
IF (273) 53 54
THEN (274) 53 54
ELSE (275) 53
WHILE (276) 55
FOR (277) 56
TO (278) 56
LET (279) 58
IN (280) 58
END (281) 58
OF (282) 59 77
DO (283) 55 56
BREAK (284) 57
NIL (285) 22
FUNCTION (286) 68 69
VAR (287) 70 71
TYPE (288) 75 76 77
OR (289) 41
AND (290) 40
EQ (291) 34 44 68 69 75 76 77
NEQ (292) 35
LT (293) 36
LE (294) 37
GT (295) 38
GE (296) 39
PLUS (297) 30
MINUS (298) 31 42
TIMES (299) 32
DIVIDE (300) 33
UMINUS (301)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
lvalue (49)
    on left: 2 3 4, on right: 3 4 21 52
exp (50)
    on left: 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20, on right:
    1 4 27 29 30 31 32 33 34 35 36 37 38 39 40 41 42 44 50 51 52 53
    54 55 56 59 68 69 70 71
varExp (51)
    on left: 21, on right: 5
nilExp (52)
    on left: 22, on right: 6
intExp (53)
    on left: 23, on right: 7
stringExp (54)
    on left: 24, on right: 8
callExp (55)
    on left: 25, on right: 11
argList (56)
    on left: 26 27, on right: 25
argList_ (57)
    on left: 28 29, on right: 27 29
binaryOpExp (58)
    on left: 30 31 32 33 34 35 36 37 38 39 40 41, on right: 9
unaryOpExp (59)
    on left: 42, on right: 10
recordCreateExp (60)
    on left: 43, on right: 14
efield (61)
    on left: 44, on right: 46 48
efieldList (62)
    on left: 45 46, on right: 43
efieldList_ (63)
    on left: 47 48, on right: 46 48
seqExp (64)
    on left: 49, on right: 12
seqList (65)
    on left: 50 51, on right: 49 51 58
assignExp (66)
    on left: 52, on right: 13
ifExp (67)
    on left: 53 54, on right: 16
whileExp (68)
    on left: 55, on right: 17
forExp (69)
    on left: 56, on right: 18
breakExp (70)
    on left: 57, on right: 19
letExp (71)
    on left: 58, on right: 20
arrayCreateExp (72)
    on left: 59, on right: 15
decs (73)
    on left: 60 61, on right: 58 61
dec (74)
    on left: 62 63 64, on right: 60 61
funcdec (75)
    on left: 65, on right: 62
funcdecList (76)
    on left: 66 67, on right: 65 67
funcdec_ (77)
    on left: 68 69, on right: 66 67
vardec (78)
    on left: 70 71, on right: 63
tydec (79)
    on left: 72, on right: 64
nametyList (80)
    on left: 73 74, on right: 72 74
namety (81)
    on left: 75 76 77, on right: 73 74
field (82)
    on left: 78, on right: 80 82
fieldList (83)
    on left: 79 80, on right: 68 69 76
fieldList_ (84)
    on left: 81 82, on right: 80 82


State 0

    0 $accept: . program $end
    1 program: . exp
    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    program          go to state 12
    lvalue           go to state 13
    exp              go to state 14
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 1

    2 lvalue: ID .  [$end, COMMA, SEMICOLON, RPAREN, LBRACK, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]
   25 callExp: ID . LPAREN argList RPAREN
   43 recordCreateExp: ID . LBRACE efieldList RBRACE
   59 arrayCreateExp: ID . LBRACK exp RBRACK OF exp

    LPAREN  shift, and go to state 31
    LBRACK  shift, and go to state 32
    LBRACE  shift, and go to state 33

    LBRACK    [reduce using rule 2 (lvalue)]
    $default  reduce using rule 2 (lvalue)


State 2

   24 stringExp: STRING .

    $default  reduce using rule 24 (stringExp)


State 3

   23 intExp: INT .

    $default  reduce using rule 23 (intExp)


State 4

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   49       | LPAREN . seqList RPAREN
   50 seqList: . exp
   51        | . exp SEMICOLON seqList
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 34
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    seqList          go to state 35
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 5

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   53      | IF . exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   54      | IF . exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 36
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 6

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   55         | WHILE . exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 37
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 7

   56 forExp: FOR . ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 38


State 8

   58 letExp: LET . decs IN seqList END
   60 decs: . dec
   61     | . dec decs
   62 dec: . funcdec
   63    | . vardec
   64    | . tydec
   65 funcdec: . funcdecList
   66 funcdecList: . funcdec_
   67            | . funcdec_ funcdecList
   68 funcdec_: . FUNCTION ID LPAREN fieldList RPAREN COLON ID EQ exp
   69         | . FUNCTION ID LPAREN fieldList RPAREN EQ exp
   70 vardec: . VAR ID ASSIGN exp
   71       | . VAR ID COLON ID ASSIGN exp
   72 tydec: . nametyList
   73 nametyList: . namety
   74           | . namety nametyList
   75 namety: . TYPE ID EQ ID
   76       | . TYPE ID EQ LBRACE fieldList RBRACE
   77       | . TYPE ID EQ ARRAY OF ID

    FUNCTION  shift, and go to state 39
    VAR       shift, and go to state 40
    TYPE      shift, and go to state 41

    decs         go to state 42
    dec          go to state 43
    funcdec      go to state 44
    funcdecList  go to state 45
    funcdec_     go to state 46
    vardec       go to state 47
    tydec        go to state 48
    nametyList   go to state 49
    namety       go to state 50


State 9

   57 breakExp: BREAK .

    $default  reduce using rule 57 (breakExp)


State 10

   22 nilExp: NIL .

    $default  reduce using rule 22 (nilExp)


State 11

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   42           | MINUS . exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 51
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 12

    0 $accept: program . $end

    $end  shift, and go to state 52


State 13

    3 lvalue: lvalue . DOT ID
    4       | lvalue . LBRACK exp RBRACK
   21 varExp: lvalue .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]
   52 assignExp: lvalue . ASSIGN exp

    LBRACK  shift, and go to state 53
    DOT     shift, and go to state 54
    ASSIGN  shift, and go to state 55

    $default  reduce using rule 21 (varExp)


State 14

    1 program: exp .  [$end]
   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    $default  reduce using rule 1 (program)


State 15

    5 exp: varExp .

    $default  reduce using rule 5 (exp)


State 16

    6 exp: nilExp .

    $default  reduce using rule 6 (exp)


State 17

    7 exp: intExp .

    $default  reduce using rule 7 (exp)


State 18

    8 exp: stringExp .

    $default  reduce using rule 8 (exp)


State 19

   11 exp: callExp .

    $default  reduce using rule 11 (exp)


State 20

    9 exp: binaryOpExp .

    $default  reduce using rule 9 (exp)


State 21

   10 exp: unaryOpExp .

    $default  reduce using rule 10 (exp)


State 22

   14 exp: recordCreateExp .

    $default  reduce using rule 14 (exp)


State 23

   12 exp: seqExp .

    $default  reduce using rule 12 (exp)


State 24

   13 exp: assignExp .

    $default  reduce using rule 13 (exp)


State 25

   16 exp: ifExp .

    $default  reduce using rule 16 (exp)


State 26

   17 exp: whileExp .

    $default  reduce using rule 17 (exp)


State 27

   18 exp: forExp .

    $default  reduce using rule 18 (exp)


State 28

   19 exp: breakExp .

    $default  reduce using rule 19 (exp)


State 29

   20 exp: letExp .

    $default  reduce using rule 20 (exp)


State 30

   15 exp: arrayCreateExp .

    $default  reduce using rule 15 (exp)


State 31

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   25        | ID LPAREN . argList RPAREN
   26 argList: . %empty  [RPAREN]
   27        | . exp argList_
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    $default  reduce using rule 26 (argList)

    lvalue           go to state 13
    exp              go to state 68
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    argList          go to state 69
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 32

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp
   59               | ID LBRACK . exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 70
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 33

   43 recordCreateExp: ID LBRACE . efieldList RBRACE
   44 efield: . ID EQ exp
   45 efieldList: . %empty  [RBRACE]
   46           | . efield efieldList_

    ID  shift, and go to state 71

    $default  reduce using rule 45 (efieldList)

    efield      go to state 72
    efieldList  go to state 73


State 34

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   50 seqList: exp .  [RPAREN, END]
   51        | exp . SEMICOLON seqList

    SEMICOLON  shift, and go to state 74
    OR         shift, and go to state 56
    AND        shift, and go to state 57
    EQ         shift, and go to state 58
    NEQ        shift, and go to state 59
    LT         shift, and go to state 60
    LE         shift, and go to state 61
    GT         shift, and go to state 62
    GE         shift, and go to state 63
    PLUS       shift, and go to state 64
    MINUS      shift, and go to state 65
    TIMES      shift, and go to state 66
    DIVIDE     shift, and go to state 67

    $default  reduce using rule 50 (seqList)


State 35

   49 seqExp: LPAREN seqList . RPAREN

    RPAREN  shift, and go to state 75


State 36

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   53 ifExp: IF exp . THEN exp ELSE exp
   54      | IF exp . THEN exp

    THEN    shift, and go to state 76
    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67


State 37

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   55 whileExp: WHILE exp . DO exp

    DO      shift, and go to state 77
    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67


State 38

   56 forExp: FOR ID . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 78


State 39

   68 funcdec_: FUNCTION . ID LPAREN fieldList RPAREN COLON ID EQ exp
   69         | FUNCTION . ID LPAREN fieldList RPAREN EQ exp

    ID  shift, and go to state 79


State 40

   70 vardec: VAR . ID ASSIGN exp
   71       | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 80


State 41

   75 namety: TYPE . ID EQ ID
   76       | TYPE . ID EQ LBRACE fieldList RBRACE
   77       | TYPE . ID EQ ARRAY OF ID

    ID  shift, and go to state 81


State 42

   58 letExp: LET decs . IN seqList END

    IN  shift, and go to state 82


State 43

   60 decs: . dec
   60     | dec .  [IN]
   61     | . dec decs
   61     | dec . decs
   62 dec: . funcdec
   63    | . vardec
   64    | . tydec
   65 funcdec: . funcdecList
   66 funcdecList: . funcdec_
   67            | . funcdec_ funcdecList
   68 funcdec_: . FUNCTION ID LPAREN fieldList RPAREN COLON ID EQ exp
   69         | . FUNCTION ID LPAREN fieldList RPAREN EQ exp
   70 vardec: . VAR ID ASSIGN exp
   71       | . VAR ID COLON ID ASSIGN exp
   72 tydec: . nametyList
   73 nametyList: . namety
   74           | . namety nametyList
   75 namety: . TYPE ID EQ ID
   76       | . TYPE ID EQ LBRACE fieldList RBRACE
   77       | . TYPE ID EQ ARRAY OF ID

    FUNCTION  shift, and go to state 39
    VAR       shift, and go to state 40
    TYPE      shift, and go to state 41

    $default  reduce using rule 60 (decs)

    decs         go to state 83
    dec          go to state 43
    funcdec      go to state 44
    funcdecList  go to state 45
    funcdec_     go to state 46
    vardec       go to state 47
    tydec        go to state 48
    nametyList   go to state 49
    namety       go to state 50


State 44

   62 dec: funcdec .

    $default  reduce using rule 62 (dec)


State 45

   65 funcdec: funcdecList .

    $default  reduce using rule 65 (funcdec)


State 46

   66 funcdecList: . funcdec_
   66            | funcdec_ .  [IN, FUNCTION, VAR, TYPE]
   67            | . funcdec_ funcdecList
   67            | funcdec_ . funcdecList
   68 funcdec_: . FUNCTION ID LPAREN fieldList RPAREN COLON ID EQ exp
   69         | . FUNCTION ID LPAREN fieldList RPAREN EQ exp

    FUNCTION  shift, and go to state 39

    FUNCTION  [reduce using rule 66 (funcdecList)]
    $default  reduce using rule 66 (funcdecList)

    funcdecList  go to state 84
    funcdec_     go to state 46


State 47

   63 dec: vardec .

    $default  reduce using rule 63 (dec)


State 48

   64 dec: tydec .

    $default  reduce using rule 64 (dec)


State 49

   72 tydec: nametyList .

    $default  reduce using rule 72 (tydec)


State 50

   73 nametyList: . namety
   73           | namety .  [IN, FUNCTION, VAR, TYPE]
   74           | . namety nametyList
   74           | namety . nametyList
   75 namety: . TYPE ID EQ ID
   76       | . TYPE ID EQ LBRACE fieldList RBRACE
   77       | . TYPE ID EQ ARRAY OF ID

    TYPE  shift, and go to state 41

    TYPE      [reduce using rule 73 (nametyList)]
    $default  reduce using rule 73 (nametyList)

    nametyList  go to state 85
    namety      go to state 50


State 51

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   42 unaryOpExp: MINUS exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]

    $default  reduce using rule 42 (unaryOpExp)

    Conflict between rule 42 and token OR resolved as reduce (OR < UMINUS).
    Conflict between rule 42 and token AND resolved as reduce (AND < UMINUS).
    Conflict between rule 42 and token EQ resolved as reduce (EQ < UMINUS).
    Conflict between rule 42 and token NEQ resolved as reduce (NEQ < UMINUS).
    Conflict between rule 42 and token LT resolved as reduce (LT < UMINUS).
    Conflict between rule 42 and token LE resolved as reduce (LE < UMINUS).
    Conflict between rule 42 and token GT resolved as reduce (GT < UMINUS).
    Conflict between rule 42 and token GE resolved as reduce (GE < UMINUS).
    Conflict between rule 42 and token PLUS resolved as reduce (PLUS < UMINUS).
    Conflict between rule 42 and token MINUS resolved as reduce (MINUS < UMINUS).
    Conflict between rule 42 and token TIMES resolved as reduce (TIMES < UMINUS).
    Conflict between rule 42 and token DIVIDE resolved as reduce (DIVIDE < UMINUS).


State 52

    0 $accept: program $end .

    $default  accept


State 53

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    4       | lvalue LBRACK . exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 86
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 54

    3 lvalue: lvalue DOT . ID

    ID  shift, and go to state 87


State 55

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   52          | lvalue ASSIGN . exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 88
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 56

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   41            | exp OR . exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 89
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 57

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   40            | exp AND . exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 90
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 58

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   34            | exp EQ . exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 91
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 59

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   35            | exp NEQ . exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 92
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 60

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   36            | exp LT . exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 93
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 61

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   37            | exp LE . exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 94
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 62

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   38            | exp GT . exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 95
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 63

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   39            | exp GE . exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 96
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 64

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   30            | exp PLUS . exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 97
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 65

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   31            | exp MINUS . exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 98
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 66

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   32            | exp TIMES . exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 99
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 67

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   33            | exp DIVIDE . exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 100
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 68

   27 argList: exp . argList_
   28 argList_: . %empty  [RPAREN]
   29         | . COMMA exp argList_
   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    COMMA   shift, and go to state 101
    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    $default  reduce using rule 28 (argList_)

    argList_  go to state 102


State 69

   25 callExp: ID LPAREN argList . RPAREN

    RPAREN  shift, and go to state 103


State 70

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   59 arrayCreateExp: ID LBRACK exp . RBRACK OF exp

    RBRACK  shift, and go to state 104
    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67


State 71

   44 efield: ID . EQ exp

    EQ  shift, and go to state 105


State 72

   46 efieldList: efield . efieldList_
   47 efieldList_: . %empty  [RBRACE]
   48            | . COMMA efield efieldList_

    COMMA  shift, and go to state 106

    $default  reduce using rule 47 (efieldList_)

    efieldList_  go to state 107


State 73

   43 recordCreateExp: ID LBRACE efieldList . RBRACE

    RBRACE  shift, and go to state 108


State 74

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   50 seqList: . exp
   51        | . exp SEMICOLON seqList
   51        | exp SEMICOLON . seqList
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 34
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    seqList          go to state 109
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 75

   49 seqExp: LPAREN seqList RPAREN .

    $default  reduce using rule 49 (seqExp)


State 76

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   53      | IF exp THEN . exp ELSE exp
   54      | . IF exp THEN exp
   54      | IF exp THEN . exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 110
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 77

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   55         | WHILE exp DO . exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 111
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 78

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   56       | FOR ID ASSIGN . exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 112
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 79

   68 funcdec_: FUNCTION ID . LPAREN fieldList RPAREN COLON ID EQ exp
   69         | FUNCTION ID . LPAREN fieldList RPAREN EQ exp

    LPAREN  shift, and go to state 113


State 80

   70 vardec: VAR ID . ASSIGN exp
   71       | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 114
    ASSIGN  shift, and go to state 115


State 81

   75 namety: TYPE ID . EQ ID
   76       | TYPE ID . EQ LBRACE fieldList RBRACE
   77       | TYPE ID . EQ ARRAY OF ID

    EQ  shift, and go to state 116


State 82

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   50 seqList: . exp
   51        | . exp SEMICOLON seqList
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   58       | LET decs IN . seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 34
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    seqList          go to state 117
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 83

   61 decs: dec decs .

    $default  reduce using rule 61 (decs)


State 84

   67 funcdecList: funcdec_ funcdecList .

    $default  reduce using rule 67 (funcdecList)


State 85

   74 nametyList: namety nametyList .

    $default  reduce using rule 74 (nametyList)


State 86

    4 lvalue: lvalue LBRACK exp . RBRACK
   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    RBRACK  shift, and go to state 118
    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67


State 87

    3 lvalue: lvalue DOT ID .

    $default  reduce using rule 3 (lvalue)


State 88

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   52 assignExp: lvalue ASSIGN exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE]

    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    $default  reduce using rule 52 (assignExp)

    Conflict between rule 52 and token OR resolved as shift (ASSIGN < OR).
    Conflict between rule 52 and token AND resolved as shift (ASSIGN < AND).
    Conflict between rule 52 and token EQ resolved as shift (ASSIGN < EQ).
    Conflict between rule 52 and token NEQ resolved as shift (ASSIGN < NEQ).
    Conflict between rule 52 and token LT resolved as shift (ASSIGN < LT).
    Conflict between rule 52 and token LE resolved as shift (ASSIGN < LE).
    Conflict between rule 52 and token GT resolved as shift (ASSIGN < GT).
    Conflict between rule 52 and token GE resolved as shift (ASSIGN < GE).
    Conflict between rule 52 and token PLUS resolved as shift (ASSIGN < PLUS).
    Conflict between rule 52 and token MINUS resolved as shift (ASSIGN < MINUS).
    Conflict between rule 52 and token TIMES resolved as shift (ASSIGN < TIMES).
    Conflict between rule 52 and token DIVIDE resolved as shift (ASSIGN < DIVIDE).


State 89

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   41            | exp OR exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR]

    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    $default  reduce using rule 41 (binaryOpExp)

    Conflict between rule 41 and token OR resolved as reduce (%left OR).
    Conflict between rule 41 and token AND resolved as shift (OR < AND).
    Conflict between rule 41 and token EQ resolved as shift (OR < EQ).
    Conflict between rule 41 and token NEQ resolved as shift (OR < NEQ).
    Conflict between rule 41 and token LT resolved as shift (OR < LT).
    Conflict between rule 41 and token LE resolved as shift (OR < LE).
    Conflict between rule 41 and token GT resolved as shift (OR < GT).
    Conflict between rule 41 and token GE resolved as shift (OR < GE).
    Conflict between rule 41 and token PLUS resolved as shift (OR < PLUS).
    Conflict between rule 41 and token MINUS resolved as shift (OR < MINUS).
    Conflict between rule 41 and token TIMES resolved as shift (OR < TIMES).
    Conflict between rule 41 and token DIVIDE resolved as shift (OR < DIVIDE).


State 90

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   40            | exp AND exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND]
   41            | exp . OR exp

    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    $default  reduce using rule 40 (binaryOpExp)

    Conflict between rule 40 and token OR resolved as reduce (OR < AND).
    Conflict between rule 40 and token AND resolved as reduce (%left AND).
    Conflict between rule 40 and token EQ resolved as shift (AND < EQ).
    Conflict between rule 40 and token NEQ resolved as shift (AND < NEQ).
    Conflict between rule 40 and token LT resolved as shift (AND < LT).
    Conflict between rule 40 and token LE resolved as shift (AND < LE).
    Conflict between rule 40 and token GT resolved as shift (AND < GT).
    Conflict between rule 40 and token GE resolved as shift (AND < GE).
    Conflict between rule 40 and token PLUS resolved as shift (AND < PLUS).
    Conflict between rule 40 and token MINUS resolved as shift (AND < MINUS).
    Conflict between rule 40 and token TIMES resolved as shift (AND < TIMES).
    Conflict between rule 40 and token DIVIDE resolved as shift (AND < DIVIDE).


State 91

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   34            | exp EQ exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND]
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 34 (binaryOpExp)

    Conflict between rule 34 and token OR resolved as reduce (OR < EQ).
    Conflict between rule 34 and token AND resolved as reduce (AND < EQ).
    Conflict between rule 34 and token EQ resolved as an error (%nonassoc EQ).
    Conflict between rule 34 and token NEQ resolved as an error (%nonassoc NEQ).
    Conflict between rule 34 and token LT resolved as an error (%nonassoc LT).
    Conflict between rule 34 and token LE resolved as an error (%nonassoc LE).
    Conflict between rule 34 and token GT resolved as an error (%nonassoc GT).
    Conflict between rule 34 and token GE resolved as an error (%nonassoc GE).
    Conflict between rule 34 and token PLUS resolved as shift (EQ < PLUS).
    Conflict between rule 34 and token MINUS resolved as shift (EQ < MINUS).
    Conflict between rule 34 and token TIMES resolved as shift (EQ < TIMES).
    Conflict between rule 34 and token DIVIDE resolved as shift (EQ < DIVIDE).


State 92

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   35            | exp NEQ exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND]
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 35 (binaryOpExp)

    Conflict between rule 35 and token OR resolved as reduce (OR < NEQ).
    Conflict between rule 35 and token AND resolved as reduce (AND < NEQ).
    Conflict between rule 35 and token EQ resolved as an error (%nonassoc EQ).
    Conflict between rule 35 and token NEQ resolved as an error (%nonassoc NEQ).
    Conflict between rule 35 and token LT resolved as an error (%nonassoc LT).
    Conflict between rule 35 and token LE resolved as an error (%nonassoc LE).
    Conflict between rule 35 and token GT resolved as an error (%nonassoc GT).
    Conflict between rule 35 and token GE resolved as an error (%nonassoc GE).
    Conflict between rule 35 and token PLUS resolved as shift (NEQ < PLUS).
    Conflict between rule 35 and token MINUS resolved as shift (NEQ < MINUS).
    Conflict between rule 35 and token TIMES resolved as shift (NEQ < TIMES).
    Conflict between rule 35 and token DIVIDE resolved as shift (NEQ < DIVIDE).


State 93

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   36            | exp LT exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND]
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 36 (binaryOpExp)

    Conflict between rule 36 and token OR resolved as reduce (OR < LT).
    Conflict between rule 36 and token AND resolved as reduce (AND < LT).
    Conflict between rule 36 and token EQ resolved as an error (%nonassoc EQ).
    Conflict between rule 36 and token NEQ resolved as an error (%nonassoc NEQ).
    Conflict between rule 36 and token LT resolved as an error (%nonassoc LT).
    Conflict between rule 36 and token LE resolved as an error (%nonassoc LE).
    Conflict between rule 36 and token GT resolved as an error (%nonassoc GT).
    Conflict between rule 36 and token GE resolved as an error (%nonassoc GE).
    Conflict between rule 36 and token PLUS resolved as shift (LT < PLUS).
    Conflict between rule 36 and token MINUS resolved as shift (LT < MINUS).
    Conflict between rule 36 and token TIMES resolved as shift (LT < TIMES).
    Conflict between rule 36 and token DIVIDE resolved as shift (LT < DIVIDE).


State 94

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   37            | exp LE exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND]
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 37 (binaryOpExp)

    Conflict between rule 37 and token OR resolved as reduce (OR < LE).
    Conflict between rule 37 and token AND resolved as reduce (AND < LE).
    Conflict between rule 37 and token EQ resolved as an error (%nonassoc EQ).
    Conflict between rule 37 and token NEQ resolved as an error (%nonassoc NEQ).
    Conflict between rule 37 and token LT resolved as an error (%nonassoc LT).
    Conflict between rule 37 and token LE resolved as an error (%nonassoc LE).
    Conflict between rule 37 and token GT resolved as an error (%nonassoc GT).
    Conflict between rule 37 and token GE resolved as an error (%nonassoc GE).
    Conflict between rule 37 and token PLUS resolved as shift (LE < PLUS).
    Conflict between rule 37 and token MINUS resolved as shift (LE < MINUS).
    Conflict between rule 37 and token TIMES resolved as shift (LE < TIMES).
    Conflict between rule 37 and token DIVIDE resolved as shift (LE < DIVIDE).


State 95

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   38            | exp GT exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND]
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 38 (binaryOpExp)

    Conflict between rule 38 and token OR resolved as reduce (OR < GT).
    Conflict between rule 38 and token AND resolved as reduce (AND < GT).
    Conflict between rule 38 and token EQ resolved as an error (%nonassoc EQ).
    Conflict between rule 38 and token NEQ resolved as an error (%nonassoc NEQ).
    Conflict between rule 38 and token LT resolved as an error (%nonassoc LT).
    Conflict between rule 38 and token LE resolved as an error (%nonassoc LE).
    Conflict between rule 38 and token GT resolved as an error (%nonassoc GT).
    Conflict between rule 38 and token GE resolved as an error (%nonassoc GE).
    Conflict between rule 38 and token PLUS resolved as shift (GT < PLUS).
    Conflict between rule 38 and token MINUS resolved as shift (GT < MINUS).
    Conflict between rule 38 and token TIMES resolved as shift (GT < TIMES).
    Conflict between rule 38 and token DIVIDE resolved as shift (GT < DIVIDE).


State 96

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   39            | exp GE exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND]
   40            | exp . AND exp
   41            | exp . OR exp

    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 39 (binaryOpExp)

    Conflict between rule 39 and token OR resolved as reduce (OR < GE).
    Conflict between rule 39 and token AND resolved as reduce (AND < GE).
    Conflict between rule 39 and token EQ resolved as an error (%nonassoc EQ).
    Conflict between rule 39 and token NEQ resolved as an error (%nonassoc NEQ).
    Conflict between rule 39 and token LT resolved as an error (%nonassoc LT).
    Conflict between rule 39 and token LE resolved as an error (%nonassoc LE).
    Conflict between rule 39 and token GT resolved as an error (%nonassoc GT).
    Conflict between rule 39 and token GE resolved as an error (%nonassoc GE).
    Conflict between rule 39 and token PLUS resolved as shift (GE < PLUS).
    Conflict between rule 39 and token MINUS resolved as shift (GE < MINUS).
    Conflict between rule 39 and token TIMES resolved as shift (GE < TIMES).
    Conflict between rule 39 and token DIVIDE resolved as shift (GE < DIVIDE).


State 97

   30 binaryOpExp: exp . PLUS exp
   30            | exp PLUS exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS]
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    $default  reduce using rule 30 (binaryOpExp)

    Conflict between rule 30 and token OR resolved as reduce (OR < PLUS).
    Conflict between rule 30 and token AND resolved as reduce (AND < PLUS).
    Conflict between rule 30 and token EQ resolved as reduce (EQ < PLUS).
    Conflict between rule 30 and token NEQ resolved as reduce (NEQ < PLUS).
    Conflict between rule 30 and token LT resolved as reduce (LT < PLUS).
    Conflict between rule 30 and token LE resolved as reduce (LE < PLUS).
    Conflict between rule 30 and token GT resolved as reduce (GT < PLUS).
    Conflict between rule 30 and token GE resolved as reduce (GE < PLUS).
    Conflict between rule 30 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 30 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 30 and token TIMES resolved as shift (PLUS < TIMES).
    Conflict between rule 30 and token DIVIDE resolved as shift (PLUS < DIVIDE).


State 98

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   31            | exp MINUS exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS]
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    $default  reduce using rule 31 (binaryOpExp)

    Conflict between rule 31 and token OR resolved as reduce (OR < MINUS).
    Conflict between rule 31 and token AND resolved as reduce (AND < MINUS).
    Conflict between rule 31 and token EQ resolved as reduce (EQ < MINUS).
    Conflict between rule 31 and token NEQ resolved as reduce (NEQ < MINUS).
    Conflict between rule 31 and token LT resolved as reduce (LT < MINUS).
    Conflict between rule 31 and token LE resolved as reduce (LE < MINUS).
    Conflict between rule 31 and token GT resolved as reduce (GT < MINUS).
    Conflict between rule 31 and token GE resolved as reduce (GE < MINUS).
    Conflict between rule 31 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 31 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 31 and token TIMES resolved as shift (MINUS < TIMES).
    Conflict between rule 31 and token DIVIDE resolved as shift (MINUS < DIVIDE).


State 99

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   32            | exp TIMES exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    $default  reduce using rule 32 (binaryOpExp)

    Conflict between rule 32 and token OR resolved as reduce (OR < TIMES).
    Conflict between rule 32 and token AND resolved as reduce (AND < TIMES).
    Conflict between rule 32 and token EQ resolved as reduce (EQ < TIMES).
    Conflict between rule 32 and token NEQ resolved as reduce (NEQ < TIMES).
    Conflict between rule 32 and token LT resolved as reduce (LT < TIMES).
    Conflict between rule 32 and token LE resolved as reduce (LE < TIMES).
    Conflict between rule 32 and token GT resolved as reduce (GT < TIMES).
    Conflict between rule 32 and token GE resolved as reduce (GE < TIMES).
    Conflict between rule 32 and token PLUS resolved as reduce (PLUS < TIMES).
    Conflict between rule 32 and token MINUS resolved as reduce (MINUS < TIMES).
    Conflict between rule 32 and token TIMES resolved as reduce (%left TIMES).
    Conflict between rule 32 and token DIVIDE resolved as reduce (%left DIVIDE).


State 100

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   33            | exp DIVIDE exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    $default  reduce using rule 33 (binaryOpExp)

    Conflict between rule 33 and token OR resolved as reduce (OR < DIVIDE).
    Conflict between rule 33 and token AND resolved as reduce (AND < DIVIDE).
    Conflict between rule 33 and token EQ resolved as reduce (EQ < DIVIDE).
    Conflict between rule 33 and token NEQ resolved as reduce (NEQ < DIVIDE).
    Conflict between rule 33 and token LT resolved as reduce (LT < DIVIDE).
    Conflict between rule 33 and token LE resolved as reduce (LE < DIVIDE).
    Conflict between rule 33 and token GT resolved as reduce (GT < DIVIDE).
    Conflict between rule 33 and token GE resolved as reduce (GE < DIVIDE).
    Conflict between rule 33 and token PLUS resolved as reduce (PLUS < DIVIDE).
    Conflict between rule 33 and token MINUS resolved as reduce (MINUS < DIVIDE).
    Conflict between rule 33 and token TIMES resolved as reduce (%left TIMES).
    Conflict between rule 33 and token DIVIDE resolved as reduce (%left DIVIDE).


State 101

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   29 argList_: COMMA . exp argList_
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 119
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 102

   27 argList: exp argList_ .

    $default  reduce using rule 27 (argList)


State 103

   25 callExp: ID LPAREN argList RPAREN .

    $default  reduce using rule 25 (callExp)


State 104

   59 arrayCreateExp: ID LBRACK exp RBRACK . OF exp

    OF  shift, and go to state 120


State 105

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   44 efield: ID EQ . exp
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 121
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 106

   44 efield: . ID EQ exp
   48 efieldList_: COMMA . efield efieldList_

    ID  shift, and go to state 71

    efield  go to state 122


State 107

   46 efieldList: efield efieldList_ .

    $default  reduce using rule 46 (efieldList)


State 108

   43 recordCreateExp: ID LBRACE efieldList RBRACE .

    $default  reduce using rule 43 (recordCreateExp)


State 109

   51 seqList: exp SEMICOLON seqList .

    $default  reduce using rule 51 (seqList)


State 110

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   53 ifExp: IF exp THEN exp . ELSE exp
   54      | IF exp THEN exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]

    ELSE    shift, and go to state 123
    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    ELSE      [reduce using rule 54 (ifExp)]
    OR        [reduce using rule 54 (ifExp)]
    AND       [reduce using rule 54 (ifExp)]
    EQ        [reduce using rule 54 (ifExp)]
    NEQ       [reduce using rule 54 (ifExp)]
    LT        [reduce using rule 54 (ifExp)]
    LE        [reduce using rule 54 (ifExp)]
    GT        [reduce using rule 54 (ifExp)]
    GE        [reduce using rule 54 (ifExp)]
    PLUS      [reduce using rule 54 (ifExp)]
    MINUS     [reduce using rule 54 (ifExp)]
    TIMES     [reduce using rule 54 (ifExp)]
    DIVIDE    [reduce using rule 54 (ifExp)]
    $default  reduce using rule 54 (ifExp)


State 111

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   55 whileExp: WHILE exp DO exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]

    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    OR        [reduce using rule 55 (whileExp)]
    AND       [reduce using rule 55 (whileExp)]
    EQ        [reduce using rule 55 (whileExp)]
    NEQ       [reduce using rule 55 (whileExp)]
    LT        [reduce using rule 55 (whileExp)]
    LE        [reduce using rule 55 (whileExp)]
    GT        [reduce using rule 55 (whileExp)]
    GE        [reduce using rule 55 (whileExp)]
    PLUS      [reduce using rule 55 (whileExp)]
    MINUS     [reduce using rule 55 (whileExp)]
    TIMES     [reduce using rule 55 (whileExp)]
    DIVIDE    [reduce using rule 55 (whileExp)]
    $default  reduce using rule 55 (whileExp)


State 112

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   56 forExp: FOR ID ASSIGN exp . TO exp DO exp

    TO      shift, and go to state 124
    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67


State 113

   68 funcdec_: FUNCTION ID LPAREN . fieldList RPAREN COLON ID EQ exp
   69         | FUNCTION ID LPAREN . fieldList RPAREN EQ exp
   78 field: . ID COLON ID
   79 fieldList: . %empty  [RPAREN]
   80          | . field fieldList_

    ID  shift, and go to state 125

    $default  reduce using rule 79 (fieldList)

    field      go to state 126
    fieldList  go to state 127


State 114

   71 vardec: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 128


State 115

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp
   70 vardec: VAR ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 129
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 116

   75 namety: TYPE ID EQ . ID
   76       | TYPE ID EQ . LBRACE fieldList RBRACE
   77       | TYPE ID EQ . ARRAY OF ID

    ID      shift, and go to state 130
    LBRACE  shift, and go to state 131
    ARRAY   shift, and go to state 132


State 117

   58 letExp: LET decs IN seqList . END

    END  shift, and go to state 133


State 118

    4 lvalue: lvalue LBRACK exp RBRACK .

    $default  reduce using rule 4 (lvalue)


State 119

   28 argList_: . %empty  [RPAREN]
   29         | . COMMA exp argList_
   29         | COMMA exp . argList_
   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    COMMA   shift, and go to state 101
    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    $default  reduce using rule 28 (argList_)

    argList_  go to state 134


State 120

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp
   59               | ID LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 135
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 121

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   44 efield: ID EQ exp .  [COMMA, RBRACE]

    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    $default  reduce using rule 44 (efield)


State 122

   47 efieldList_: . %empty  [RBRACE]
   48            | . COMMA efield efieldList_
   48            | COMMA efield . efieldList_

    COMMA  shift, and go to state 106

    $default  reduce using rule 47 (efieldList_)

    efieldList_  go to state 136


State 123

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   53      | IF exp THEN exp ELSE . exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 137
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 124

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   56       | FOR ID ASSIGN exp TO . exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 138
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 125

   78 field: ID . COLON ID

    COLON  shift, and go to state 139


State 126

   80 fieldList: field . fieldList_
   81 fieldList_: . %empty  [RPAREN, RBRACE]
   82           | . COMMA field fieldList_

    COMMA  shift, and go to state 140

    $default  reduce using rule 81 (fieldList_)

    fieldList_  go to state 141


State 127

   68 funcdec_: FUNCTION ID LPAREN fieldList . RPAREN COLON ID EQ exp
   69         | FUNCTION ID LPAREN fieldList . RPAREN EQ exp

    RPAREN  shift, and go to state 142


State 128

   71 vardec: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 143


State 129

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   70 vardec: VAR ID ASSIGN exp .  [IN, FUNCTION, VAR, TYPE]

    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    $default  reduce using rule 70 (vardec)


State 130

   75 namety: TYPE ID EQ ID .

    $default  reduce using rule 75 (namety)


State 131

   76 namety: TYPE ID EQ LBRACE . fieldList RBRACE
   78 field: . ID COLON ID
   79 fieldList: . %empty  [RBRACE]
   80          | . field fieldList_

    ID  shift, and go to state 125

    $default  reduce using rule 79 (fieldList)

    field      go to state 126
    fieldList  go to state 144


State 132

   77 namety: TYPE ID EQ ARRAY . OF ID

    OF  shift, and go to state 145


State 133

   58 letExp: LET decs IN seqList END .

    $default  reduce using rule 58 (letExp)


State 134

   29 argList_: COMMA exp argList_ .

    $default  reduce using rule 29 (argList_)


State 135

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   59 arrayCreateExp: ID LBRACK exp RBRACK OF exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]

    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    OR        [reduce using rule 59 (arrayCreateExp)]
    AND       [reduce using rule 59 (arrayCreateExp)]
    EQ        [reduce using rule 59 (arrayCreateExp)]
    NEQ       [reduce using rule 59 (arrayCreateExp)]
    LT        [reduce using rule 59 (arrayCreateExp)]
    LE        [reduce using rule 59 (arrayCreateExp)]
    GT        [reduce using rule 59 (arrayCreateExp)]
    GE        [reduce using rule 59 (arrayCreateExp)]
    PLUS      [reduce using rule 59 (arrayCreateExp)]
    MINUS     [reduce using rule 59 (arrayCreateExp)]
    TIMES     [reduce using rule 59 (arrayCreateExp)]
    DIVIDE    [reduce using rule 59 (arrayCreateExp)]
    $default  reduce using rule 59 (arrayCreateExp)


State 136

   48 efieldList_: COMMA efield efieldList_ .

    $default  reduce using rule 48 (efieldList_)


State 137

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   53 ifExp: IF exp THEN exp ELSE exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]

    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    OR        [reduce using rule 53 (ifExp)]
    AND       [reduce using rule 53 (ifExp)]
    EQ        [reduce using rule 53 (ifExp)]
    NEQ       [reduce using rule 53 (ifExp)]
    LT        [reduce using rule 53 (ifExp)]
    LE        [reduce using rule 53 (ifExp)]
    GT        [reduce using rule 53 (ifExp)]
    GE        [reduce using rule 53 (ifExp)]
    PLUS      [reduce using rule 53 (ifExp)]
    MINUS     [reduce using rule 53 (ifExp)]
    TIMES     [reduce using rule 53 (ifExp)]
    DIVIDE    [reduce using rule 53 (ifExp)]
    $default  reduce using rule 53 (ifExp)


State 138

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   56 forExp: FOR ID ASSIGN exp TO exp . DO exp

    DO      shift, and go to state 146
    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67


State 139

   78 field: ID COLON . ID

    ID  shift, and go to state 147


State 140

   78 field: . ID COLON ID
   82 fieldList_: COMMA . field fieldList_

    ID  shift, and go to state 125

    field  go to state 148


State 141

   80 fieldList: field fieldList_ .

    $default  reduce using rule 80 (fieldList)


State 142

   68 funcdec_: FUNCTION ID LPAREN fieldList RPAREN . COLON ID EQ exp
   69         | FUNCTION ID LPAREN fieldList RPAREN . EQ exp

    COLON  shift, and go to state 149
    EQ     shift, and go to state 150


State 143

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp
   71 vardec: VAR ID COLON ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 151
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 144

   76 namety: TYPE ID EQ LBRACE fieldList . RBRACE

    RBRACE  shift, and go to state 152


State 145

   77 namety: TYPE ID EQ ARRAY OF . ID

    ID  shift, and go to state 153


State 146

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   56       | FOR ID ASSIGN exp TO exp DO . exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 154
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 147

   78 field: ID COLON ID .

    $default  reduce using rule 78 (field)


State 148

   81 fieldList_: . %empty  [RPAREN, RBRACE]
   82           | . COMMA field fieldList_
   82           | COMMA field . fieldList_

    COMMA  shift, and go to state 140

    $default  reduce using rule 81 (fieldList_)

    fieldList_  go to state 155


State 149

   68 funcdec_: FUNCTION ID LPAREN fieldList RPAREN COLON . ID EQ exp

    ID  shift, and go to state 156


State 150

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp
   69 funcdec_: FUNCTION ID LPAREN fieldList RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 157
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 151

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   71 vardec: VAR ID COLON ID ASSIGN exp .  [IN, FUNCTION, VAR, TYPE]

    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    $default  reduce using rule 71 (vardec)


State 152

   76 namety: TYPE ID EQ LBRACE fieldList RBRACE .

    $default  reduce using rule 76 (namety)


State 153

   77 namety: TYPE ID EQ ARRAY OF ID .

    $default  reduce using rule 77 (namety)


State 154

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   56 forExp: FOR ID ASSIGN exp TO exp DO exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]

    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    OR        [reduce using rule 56 (forExp)]
    AND       [reduce using rule 56 (forExp)]
    EQ        [reduce using rule 56 (forExp)]
    NEQ       [reduce using rule 56 (forExp)]
    LT        [reduce using rule 56 (forExp)]
    LE        [reduce using rule 56 (forExp)]
    GT        [reduce using rule 56 (forExp)]
    GE        [reduce using rule 56 (forExp)]
    PLUS      [reduce using rule 56 (forExp)]
    MINUS     [reduce using rule 56 (forExp)]
    TIMES     [reduce using rule 56 (forExp)]
    DIVIDE    [reduce using rule 56 (forExp)]
    $default  reduce using rule 56 (forExp)


State 155

   82 fieldList_: COMMA field fieldList_ .

    $default  reduce using rule 82 (fieldList_)


State 156

   68 funcdec_: FUNCTION ID LPAREN fieldList RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 158


State 157

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   69 funcdec_: FUNCTION ID LPAREN fieldList RPAREN EQ exp .  [IN, FUNCTION, VAR, TYPE]

    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    $default  reduce using rule 69 (funcdec_)


State 158

    2 lvalue: . ID
    3       | . lvalue DOT ID
    4       | . lvalue LBRACK exp RBRACK
    5 exp: . varExp
    6    | . nilExp
    7    | . intExp
    8    | . stringExp
    9    | . binaryOpExp
   10    | . unaryOpExp
   11    | . callExp
   12    | . seqExp
   13    | . assignExp
   14    | . recordCreateExp
   15    | . arrayCreateExp
   16    | . ifExp
   17    | . whileExp
   18    | . forExp
   19    | . breakExp
   20    | . letExp
   21 varExp: . lvalue
   22 nilExp: . NIL
   23 intExp: . INT
   24 stringExp: . STRING
   25 callExp: . ID LPAREN argList RPAREN
   30 binaryOpExp: . exp PLUS exp
   31            | . exp MINUS exp
   32            | . exp TIMES exp
   33            | . exp DIVIDE exp
   34            | . exp EQ exp
   35            | . exp NEQ exp
   36            | . exp LT exp
   37            | . exp LE exp
   38            | . exp GT exp
   39            | . exp GE exp
   40            | . exp AND exp
   41            | . exp OR exp
   42 unaryOpExp: . MINUS exp
   43 recordCreateExp: . ID LBRACE efieldList RBRACE
   49 seqExp: . LPAREN seqList RPAREN
   52 assignExp: . lvalue ASSIGN exp
   53 ifExp: . IF exp THEN exp ELSE exp
   54      | . IF exp THEN exp
   55 whileExp: . WHILE exp DO exp
   56 forExp: . FOR ID ASSIGN exp TO exp DO exp
   57 breakExp: . BREAK
   58 letExp: . LET decs IN seqList END
   59 arrayCreateExp: . ID LBRACK exp RBRACK OF exp
   68 funcdec_: FUNCTION ID LPAREN fieldList RPAREN COLON ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 159
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 159

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   68 funcdec_: FUNCTION ID LPAREN fieldList RPAREN COLON ID EQ exp .  [IN, FUNCTION, VAR, TYPE]

    OR      shift, and go to state 56
    AND     shift, and go to state 57
    EQ      shift, and go to state 58
    NEQ     shift, and go to state 59
    LT      shift, and go to state 60
    LE      shift, and go to state 61
    GT      shift, and go to state 62
    GE      shift, and go to state 63
    PLUS    shift, and go to state 64
    MINUS   shift, and go to state 65
    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    $default  reduce using rule 68 (funcdec_)

%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"
#include "table.h"
#include "symbol.h"


#include "absyn.h"
#include "prabsyn.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int			pos;
	int			ival;
	string		sval;
	A_var		var;
	A_exp		exp;
	A_expList	expList;
	A_decList	decList;
	A_dec		dec;
	A_ty		ty;
	A_namety	namety;
	A_nametyList	nametyList;
	A_fundec	funcdec;
	A_fundecList	funcdecList;
	A_field		field;
	A_fieldList fieldList;
	A_efield	efield; 
	A_efieldList	efieldList;
	}	

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO LET IN END OF DO
  BREAK NIL
  FUNCTION VAR TYPE 


%right ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS


%type <exp> exp program
%type <exp> varExp nilExp intExp stringExp binaryOpExp unaryOpExp callExp seqExp assignExp recordCreateExp arrayCreateExp ifExp whileExp forExp breakExp letExp
%type <var> lvalue
%type <efield> efield
%type <efieldList> efieldList efieldList_
%type <expList> seqList argList argList_
%type <decList> decs
%type <dec> dec funcdec vardec tydec
%type <namety> namety
%type <nametyList> nametyList
%type <funcdecList> funcdecList
%type <funcdec> funcdec_
%type <field> field
%type <fieldList> fieldList fieldList_

%start program

%%
           
program: exp
{
        pr_exp(stdout,$1,4);
        $$ = $1;
}
           

lvalue: ID
{
$$ = A_SimpleVar(EM_tokPos,S_Symbol($1));
}
| lvalue DOT ID
{
$$ = A_FieldVar(EM_tokPos,$1,S_Symbol($3));
}
| lvalue LBRACK exp RBRACK
{
$$ = A_SubscriptVar(EM_tokPos,$1,$3);
}
;

              
exp: varExp
{
$$ = $1;
}
| nilExp
{
$$ = $1;
}
| intExp
{
$$ = $1;
}
| stringExp
{
$$ = $1;
}
| binaryOpExp
{
$$ = $1;
}
| unaryOpExp
{
$$ = $1;
}
| callExp
{
$$ = $1;
}
| seqExp
{
$$ = $1;
}
| assignExp
{
$$ = $1;
}
| recordCreateExp
{
$$ = $1;
}
| arrayCreateExp
{
$$ = $1;
}
| ifExp
{
$$ = $1;
}
| whileExp
{
$$ = $1;
}
| forExp
{
$$ = $1;
}
| breakExp
{
$$ = $1;
}
| letExp
{
$$ = $1;
}
;

varExp: lvalue
{
$$ = A_VarExp(EM_tokPos,$1);
}
nilExp: NIL
{
$$ = A_NilExp(EM_tokPos);
}
intExp: INT
{
$$ = A_IntExp(EM_tokPos,$1);
}
stringExp: STRING
{
$$ = A_StringExp(EM_tokPos,$1);
}

callExp: ID LPAREN argList RPAREN
{
$$ = A_CallExp(EM_tokPos,S_Symbol($1),$3);
}

argList:
{
$$ = NULL;
}
| exp argList_
{
$$ = A_ExpList($1,$2);
}

argList_:
{
$$ = NULL;
}
| COMMA exp argList_
{
$$ = A_ExpList($2,$3);
}
;

binaryOpExp: exp PLUS exp
{
$$ = A_OpExp(EM_tokPos,A_plusOp,$1,$3);
}
| exp MINUS exp
{
$$ = A_OpExp(EM_tokPos,A_minusOp,$1,$3);
}
| exp TIMES exp
{
$$ = A_OpExp(EM_tokPos,A_timesOp,$1,$3);
}
| exp DIVIDE exp
{
$$ = A_OpExp(EM_tokPos,A_divideOp,$1,$3);
}
| exp EQ exp
{
$$ = A_OpExp(EM_tokPos,A_eqOp,$1,$3);
}
| exp NEQ exp
{
$$ = A_OpExp(EM_tokPos,A_neqOp,$1,$3);
}
| exp LT exp
{
$$ = A_OpExp(EM_tokPos,A_ltOp,$1,$3);
}
| exp LE exp
{
$$ = A_OpExp(EM_tokPos,A_leOp,$1,$3);
}
| exp GT exp
{
$$ = A_OpExp(EM_tokPos,A_gtOp,$1,$3);
}
| exp GE exp
{
$$ = A_OpExp(EM_tokPos,A_geOp,$1,$3);
}
| exp AND exp
{
$$ = A_OpExp(EM_tokPos,A_andOp,$1,$3);
}
| exp OR exp
{
$$ = A_OpExp(EM_tokPos,A_orOp,$1,$3);
}
;

unaryOpExp: MINUS exp %prec UMINUS
{
$$ = A_OpExp(EM_tokPos,A_orOp,A_IntExp(EM_tokPos,0),$2);
}
//---------------------------------------------
recordCreateExp: ID LBRACE efieldList RBRACE /* human {name="",age=13} */
{
$$ = A_RecordExp(EM_tokPos,S_Symbol($1),$3);
}
efield: ID EQ exp
{
$$ = A_Efield(S_Symbol($1),$3);
}
efieldList: /* EMPTY */
{
$$ = NULL;
}
| efield efieldList_
{
$$ = A_EfieldList($1,$2);
}
efieldList_:
{
$$ = NULL;
}
| COMMA efield efieldList_
{
$$ = A_EfieldList($2,$3);
}

//---------------------------------------------
seqExp: LPAREN seqList RPAREN
{
$$ = A_SeqExp(EM_tokPos,$2);
}
seqList: exp
{
$$ = A_ExpList($1,NULL);
}
| exp SEMICOLON seqList
{
$$ = A_ExpList($1,$3);
}
;

assignExp: lvalue ASSIGN exp
{
$$ = A_AssignExp(EM_tokPos,$1,$3);
}

ifExp: IF exp THEN exp ELSE exp
{
$$ = A_IfExp(EM_tokPos,$2,$4,$6);
}
| IF exp THEN exp
{
$$ = A_IfExp(EM_tokPos,$2,$4,NULL);
}
;

whileExp: WHILE exp DO exp
{
$$ = A_WhileExp(EM_tokPos,$2,$4);
}

forExp: FOR ID ASSIGN exp TO exp DO exp
{
$$ = A_ForExp(EM_tokPos,S_Symbol($2),$4,$6,$8);
}
breakExp: BREAK
{
$$ = A_BreakExp(EM_tokPos);
}
letExp: LET decs IN seqList END
{

$$ = A_LetExp(EM_tokPos,$2,$4);
}
//--------------------------------------------
arrayCreateExp: ID LBRACK exp RBRACK OF exp /* int[5] of 1 */
{
$$ = A_ArrayExp(EM_tokPos,S_Symbol($1),$3,$6);
}
//--------------------------------------------
decs: dec
{

$$ = A_DecList($1,NULL);
}
| dec decs
{
$$ = A_DecList($1,$2);
}

dec: funcdec
{
$$ = $1;
}
| vardec
{

$$ = $1;
}
| tydec
{
$$ = $1;
}
;

funcdec: funcdecList
{
$$ = A_FunctionDec(EM_tokPos,$1);
}

funcdecList: funcdec_
{
$$ = A_FundecList($1,NULL);
}
| funcdec_ funcdecList
{
$$ = A_FundecList($1,$2);
}
funcdec_: FUNCTION ID LPAREN fieldList RPAREN COLON ID EQ exp
{
$$ = A_Fundec(EM_tokPos,S_Symbol($2),$4,S_Symbol($7),$9);
}
| FUNCTION ID LPAREN fieldList RPAREN EQ exp
{
$$ = A_Fundec(EM_tokPos,S_Symbol($2),$4,NULL,$7);
}
;

vardec: VAR ID ASSIGN exp
{

$$ = A_VarDec(EM_tokPos,S_Symbol($2),NULL,$4);
}
| VAR ID COLON ID ASSIGN exp
{

$$ = A_VarDec(EM_tokPos,S_Symbol($2),S_Symbol($4),$6);
}

tydec: nametyList
{
$$ = A_TypeDec(EM_tokPos,$1);
}
nametyList: namety
{
$$ = A_NametyList($1,NULL);
}
| namety nametyList
{
$$ = A_NametyList($1,$2);
}
namety: TYPE ID EQ ID
{
$$ = A_Namety(S_Symbol($2),A_NameTy(EM_tokPos,S_Symbol($4)));
}
| TYPE ID EQ LBRACE fieldList RBRACE
{
$$ = A_Namety(S_Symbol($2),A_RecordTy(EM_tokPos,$5));
}
| TYPE ID EQ ARRAY OF ID
{
$$ = A_Namety(S_Symbol($2),A_ArrayTy(EM_tokPos,S_Symbol($6)));
}

field: ID COLON ID
{
$$ = A_Field(EM_tokPos,S_Symbol($1),S_Symbol($3));
}
fieldList:
{
$$ = NULL;
}
| field fieldList_
{
$$ = A_FieldList($1,$2);
}
fieldList_:
{
$$ = NULL;
}
| COMMA field fieldList_
{
$$ = A_FieldList($2,$3);
}
;


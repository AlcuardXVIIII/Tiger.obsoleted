State 13 conflicts: 3 shift/reduce
State 47 conflicts: 1 shift/reduce
State 51 conflicts: 1 shift/reduce
State 111 conflicts: 13 shift/reduce
State 112 conflicts: 12 shift/reduce
State 135 conflicts: 12 shift/reduce
State 137 conflicts: 12 shift/reduce
State 154 conflicts: 12 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 lvalue: ID
    3       | lvalue DOT ID
    4       | lvalue EXCLAMATION exp

    5 exp: varExp
    6    | nilExp
    7    | intExp
    8    | stringExp
    9    | binaryOpExp
   10    | unaryOpExp
   11    | callExp
   12    | seqExp
   13    | assignExp
   14    | recordCreateExp
   15    | arrayCreateExp
   16    | ifExp
   17    | whileExp
   18    | forExp
   19    | breakExp
   20    | letExp

   21 varExp: lvalue

   22 nilExp: NIL

   23 intExp: INT

   24 stringExp: STRING

   25 callExp: ID LPAREN argList RPAREN

   26 argList: %empty
   27        | exp argList_

   28 argList_: %empty
   29         | COMMA exp argList_

   30 binaryOpExp: exp PLUS exp
   31            | exp MINUS exp
   32            | exp TIMES exp
   33            | exp DIVIDE exp
   34            | exp EQ exp
   35            | exp NEQ exp
   36            | exp LT exp
   37            | exp LE exp
   38            | exp GT exp
   39            | exp GE exp
   40            | exp AND exp
   41            | exp OR exp

   42 unaryOpExp: MINUS exp

   43 recordCreateExp: ID LBRACE efieldList RBRACE

   44 efield: ID EQ exp

   45 efieldList: %empty
   46           | efield efieldList_

   47 efieldList_: %empty
   48            | COMMA efield efieldList_

   49 seqExp: LPAREN seqList_ RPAREN

   50 seqList_: %empty
   51         | seqList

   52 seqList: exp
   53        | exp SEMICOLON seqList

   54 assignExp: lvalue ASSIGN exp

   55 ifExp: IF exp THEN exp ELSE exp
   56      | IF exp THEN exp

   57 whileExp: WHILE exp DO exp

   58 forExp: FOR ID ASSIGN exp TO exp DO exp

   59 breakExp: BREAK

   60 letExp: LET decs IN seqList END

   61 arrayCreateExp: ID LBRACK exp RBRACK OF exp

   62 decs: dec
   63     | dec decs

   64 dec: funcdec
   65    | vardec
   66    | tydec

   67 funcdec: funcdecList

   68 funcdecList: funcdec_
   69            | funcdec_ funcdecList

   70 funcdec_: FUNCTION ID LPAREN fieldList RPAREN COLON ID EQ exp
   71         | FUNCTION ID LPAREN fieldList RPAREN EQ exp

   72 vardec: VAR ID ASSIGN exp
   73       | VAR ID COLON ID ASSIGN exp

   74 tydec: nametyList

   75 nametyList: namety
   76           | namety nametyList

   77 namety: TYPE ID EQ ID
   78       | TYPE ID EQ LBRACE fieldList RBRACE
   79       | TYPE ID EQ ARRAY OF ID

   80 field: ID COLON ID

   81 fieldList: %empty
   82          | field fieldList_

   83 fieldList_: %empty
   84           | COMMA field fieldList_


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 2 3 25 43 44 58 61 70 71 72 73 77 78 79 80
STRING (259) 24
INT (260) 23
COMMA (261) 29 48 84
COLON (262) 70 73 80
SEMICOLON (263) 53
LPAREN (264) 25 49 70 71
RPAREN (265) 25 49 70 71
LBRACK (266) 61
RBRACK (267) 61
LBRACE (268) 43 78
RBRACE (269) 43 78
DOT (270) 3
ASSIGN (271) 54 58 72 73
ARRAY (272) 79
IF (273) 55 56
THEN (274) 55 56
ELSE (275) 55
WHILE (276) 57
FOR (277) 58
TO (278) 58
LET (279) 60
IN (280) 60
END (281) 60
OF (282) 61 79
DO (283) 57 58
BREAK (284) 59
NIL (285) 22
FUNCTION (286) 70 71
VAR (287) 72 73
TYPE (288) 77 78 79
EXCLAMATION (289) 4
OR (290) 41
AND (291) 40
EQ (292) 34 44 70 71 77 78 79
NEQ (293) 35
LT (294) 36
LE (295) 37
GT (296) 38
GE (297) 39
PLUS (298) 30
MINUS (299) 31 42
TIMES (300) 32
DIVIDE (301) 33
UMINUS (302)


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program (49)
    on left: 1, on right: 0
lvalue (50)
    on left: 2 3 4, on right: 3 4 21 54
exp (51)
    on left: 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20, on right:
    1 4 27 29 30 31 32 33 34 35 36 37 38 39 40 41 42 44 52 53 54 55
    56 57 58 61 70 71 72 73
varExp (52)
    on left: 21, on right: 5
nilExp (53)
    on left: 22, on right: 6
intExp (54)
    on left: 23, on right: 7
stringExp (55)
    on left: 24, on right: 8
callExp (56)
    on left: 25, on right: 11
argList (57)
    on left: 26 27, on right: 25
argList_ (58)
    on left: 28 29, on right: 27 29
binaryOpExp (59)
    on left: 30 31 32 33 34 35 36 37 38 39 40 41, on right: 9
unaryOpExp (60)
    on left: 42, on right: 10
recordCreateExp (61)
    on left: 43, on right: 14
efield (62)
    on left: 44, on right: 46 48
efieldList (63)
    on left: 45 46, on right: 43
efieldList_ (64)
    on left: 47 48, on right: 46 48
seqExp (65)
    on left: 49, on right: 12
seqList_ (66)
    on left: 50 51, on right: 49
seqList (67)
    on left: 52 53, on right: 51 53 60
assignExp (68)
    on left: 54, on right: 13
ifExp (69)
    on left: 55 56, on right: 16
whileExp (70)
    on left: 57, on right: 17
forExp (71)
    on left: 58, on right: 18
breakExp (72)
    on left: 59, on right: 19
letExp (73)
    on left: 60, on right: 20
arrayCreateExp (74)
    on left: 61, on right: 15
decs (75)
    on left: 62 63, on right: 60 63
dec (76)
    on left: 64 65 66, on right: 62 63
funcdec (77)
    on left: 67, on right: 64
funcdecList (78)
    on left: 68 69, on right: 67 69
funcdec_ (79)
    on left: 70 71, on right: 68 69
vardec (80)
    on left: 72 73, on right: 65
tydec (81)
    on left: 74, on right: 66
nametyList (82)
    on left: 75 76, on right: 74 76
namety (83)
    on left: 77 78 79, on right: 75 76
field (84)
    on left: 80, on right: 82 84
fieldList (85)
    on left: 81 82, on right: 70 71 78
fieldList_ (86)
    on left: 83 84, on right: 82 84


State 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    program          go to state 12
    lvalue           go to state 13
    exp              go to state 14
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 1

    2 lvalue: ID .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]
   25 callExp: ID . LPAREN argList RPAREN
   43 recordCreateExp: ID . LBRACE efieldList RBRACE
   61 arrayCreateExp: ID . LBRACK exp RBRACK OF exp

    LPAREN  shift, and go to state 31
    LBRACK  shift, and go to state 32
    LBRACE  shift, and go to state 33

    $default  reduce using rule 2 (lvalue)


State 2

   24 stringExp: STRING .

    $default  reduce using rule 24 (stringExp)


State 3

   23 intExp: INT .

    $default  reduce using rule 23 (intExp)


State 4

   49 seqExp: LPAREN . seqList_ RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    $default  reduce using rule 50 (seqList_)

    lvalue           go to state 13
    exp              go to state 34
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    seqList_         go to state 35
    seqList          go to state 36
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 5

   55 ifExp: IF . exp THEN exp ELSE exp
   56      | IF . exp THEN exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 37
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 6

   57 whileExp: WHILE . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 38
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 7

   58 forExp: FOR . ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 39


State 8

   60 letExp: LET . decs IN seqList END

    FUNCTION  shift, and go to state 40
    VAR       shift, and go to state 41
    TYPE      shift, and go to state 42

    decs         go to state 43
    dec          go to state 44
    funcdec      go to state 45
    funcdecList  go to state 46
    funcdec_     go to state 47
    vardec       go to state 48
    tydec        go to state 49
    nametyList   go to state 50
    namety       go to state 51


State 9

   59 breakExp: BREAK .

    $default  reduce using rule 59 (breakExp)


State 10

   22 nilExp: NIL .

    $default  reduce using rule 22 (nilExp)


State 11

   42 unaryOpExp: MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 52
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 12

    0 $accept: program . $end

    $end  shift, and go to state 53


State 13

    3 lvalue: lvalue . DOT ID
    4       | lvalue . EXCLAMATION exp
   21 varExp: lvalue .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]
   54 assignExp: lvalue . ASSIGN exp

    DOT          shift, and go to state 54
    ASSIGN       shift, and go to state 55
    EXCLAMATION  shift, and go to state 56

    DOT          [reduce using rule 21 (varExp)]
    ASSIGN       [reduce using rule 21 (varExp)]
    EXCLAMATION  [reduce using rule 21 (varExp)]
    $default     reduce using rule 21 (varExp)


State 14

    1 program: exp .  [$end]
   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 1 (program)


State 15

    5 exp: varExp .

    $default  reduce using rule 5 (exp)


State 16

    6 exp: nilExp .

    $default  reduce using rule 6 (exp)


State 17

    7 exp: intExp .

    $default  reduce using rule 7 (exp)


State 18

    8 exp: stringExp .

    $default  reduce using rule 8 (exp)


State 19

   11 exp: callExp .

    $default  reduce using rule 11 (exp)


State 20

    9 exp: binaryOpExp .

    $default  reduce using rule 9 (exp)


State 21

   10 exp: unaryOpExp .

    $default  reduce using rule 10 (exp)


State 22

   14 exp: recordCreateExp .

    $default  reduce using rule 14 (exp)


State 23

   12 exp: seqExp .

    $default  reduce using rule 12 (exp)


State 24

   13 exp: assignExp .

    $default  reduce using rule 13 (exp)


State 25

   16 exp: ifExp .

    $default  reduce using rule 16 (exp)


State 26

   17 exp: whileExp .

    $default  reduce using rule 17 (exp)


State 27

   18 exp: forExp .

    $default  reduce using rule 18 (exp)


State 28

   19 exp: breakExp .

    $default  reduce using rule 19 (exp)


State 29

   20 exp: letExp .

    $default  reduce using rule 20 (exp)


State 30

   15 exp: arrayCreateExp .

    $default  reduce using rule 15 (exp)


State 31

   25 callExp: ID LPAREN . argList RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    $default  reduce using rule 26 (argList)

    lvalue           go to state 13
    exp              go to state 69
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    argList          go to state 70
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 32

   61 arrayCreateExp: ID LBRACK . exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 71
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 33

   43 recordCreateExp: ID LBRACE . efieldList RBRACE

    ID  shift, and go to state 72

    $default  reduce using rule 45 (efieldList)

    efield      go to state 73
    efieldList  go to state 74


State 34

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   52 seqList: exp .  [RPAREN, END]
   53        | exp . SEMICOLON seqList

    SEMICOLON  shift, and go to state 75
    OR         shift, and go to state 57
    AND        shift, and go to state 58
    EQ         shift, and go to state 59
    NEQ        shift, and go to state 60
    LT         shift, and go to state 61
    LE         shift, and go to state 62
    GT         shift, and go to state 63
    GE         shift, and go to state 64
    PLUS       shift, and go to state 65
    MINUS      shift, and go to state 66
    TIMES      shift, and go to state 67
    DIVIDE     shift, and go to state 68

    $default  reduce using rule 52 (seqList)


State 35

   49 seqExp: LPAREN seqList_ . RPAREN

    RPAREN  shift, and go to state 76


State 36

   51 seqList_: seqList .

    $default  reduce using rule 51 (seqList_)


State 37

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   55 ifExp: IF exp . THEN exp ELSE exp
   56      | IF exp . THEN exp

    THEN    shift, and go to state 77
    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68


State 38

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   57 whileExp: WHILE exp . DO exp

    DO      shift, and go to state 78
    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68


State 39

   58 forExp: FOR ID . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 79


State 40

   70 funcdec_: FUNCTION . ID LPAREN fieldList RPAREN COLON ID EQ exp
   71         | FUNCTION . ID LPAREN fieldList RPAREN EQ exp

    ID  shift, and go to state 80


State 41

   72 vardec: VAR . ID ASSIGN exp
   73       | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 81


State 42

   77 namety: TYPE . ID EQ ID
   78       | TYPE . ID EQ LBRACE fieldList RBRACE
   79       | TYPE . ID EQ ARRAY OF ID

    ID  shift, and go to state 82


State 43

   60 letExp: LET decs . IN seqList END

    IN  shift, and go to state 83


State 44

   62 decs: dec .  [IN]
   63     | dec . decs

    FUNCTION  shift, and go to state 40
    VAR       shift, and go to state 41
    TYPE      shift, and go to state 42

    $default  reduce using rule 62 (decs)

    decs         go to state 84
    dec          go to state 44
    funcdec      go to state 45
    funcdecList  go to state 46
    funcdec_     go to state 47
    vardec       go to state 48
    tydec        go to state 49
    nametyList   go to state 50
    namety       go to state 51


State 45

   64 dec: funcdec .

    $default  reduce using rule 64 (dec)


State 46

   67 funcdec: funcdecList .

    $default  reduce using rule 67 (funcdec)


State 47

   68 funcdecList: funcdec_ .  [IN, FUNCTION, VAR, TYPE]
   69            | funcdec_ . funcdecList

    FUNCTION  shift, and go to state 40

    FUNCTION  [reduce using rule 68 (funcdecList)]
    $default  reduce using rule 68 (funcdecList)

    funcdecList  go to state 85
    funcdec_     go to state 47


State 48

   65 dec: vardec .

    $default  reduce using rule 65 (dec)


State 49

   66 dec: tydec .

    $default  reduce using rule 66 (dec)


State 50

   74 tydec: nametyList .

    $default  reduce using rule 74 (tydec)


State 51

   75 nametyList: namety .  [IN, FUNCTION, VAR, TYPE]
   76           | namety . nametyList

    TYPE  shift, and go to state 42

    TYPE      [reduce using rule 75 (nametyList)]
    $default  reduce using rule 75 (nametyList)

    nametyList  go to state 86
    namety      go to state 51


State 52

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   42 unaryOpExp: MINUS exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]

    $default  reduce using rule 42 (unaryOpExp)


State 53

    0 $accept: program $end .

    $default  accept


State 54

    3 lvalue: lvalue DOT . ID

    ID  shift, and go to state 87


State 55

   54 assignExp: lvalue ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 88
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 56

    4 lvalue: lvalue EXCLAMATION . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 89
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 57

   41 binaryOpExp: exp OR . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 90
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 58

   40 binaryOpExp: exp AND . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 91
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 59

   34 binaryOpExp: exp EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 92
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 60

   35 binaryOpExp: exp NEQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 93
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 61

   36 binaryOpExp: exp LT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 94
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 62

   37 binaryOpExp: exp LE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 95
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 63

   38 binaryOpExp: exp GT . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 96
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 64

   39 binaryOpExp: exp GE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 97
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 65

   30 binaryOpExp: exp PLUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 98
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 66

   31 binaryOpExp: exp MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 99
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 67

   32 binaryOpExp: exp TIMES . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 100
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 68

   33 binaryOpExp: exp DIVIDE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 101
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 69

   27 argList: exp . argList_
   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    COMMA   shift, and go to state 102
    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 28 (argList_)

    argList_  go to state 103


State 70

   25 callExp: ID LPAREN argList . RPAREN

    RPAREN  shift, and go to state 104


State 71

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   61 arrayCreateExp: ID LBRACK exp . RBRACK OF exp

    RBRACK  shift, and go to state 105
    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68


State 72

   44 efield: ID . EQ exp

    EQ  shift, and go to state 106


State 73

   46 efieldList: efield . efieldList_

    COMMA  shift, and go to state 107

    $default  reduce using rule 47 (efieldList_)

    efieldList_  go to state 108


State 74

   43 recordCreateExp: ID LBRACE efieldList . RBRACE

    RBRACE  shift, and go to state 109


State 75

   53 seqList: exp SEMICOLON . seqList

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 34
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    seqList          go to state 110
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 76

   49 seqExp: LPAREN seqList_ RPAREN .

    $default  reduce using rule 49 (seqExp)


State 77

   55 ifExp: IF exp THEN . exp ELSE exp
   56      | IF exp THEN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 111
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 78

   57 whileExp: WHILE exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 112
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 79

   58 forExp: FOR ID ASSIGN . exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 113
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 80

   70 funcdec_: FUNCTION ID . LPAREN fieldList RPAREN COLON ID EQ exp
   71         | FUNCTION ID . LPAREN fieldList RPAREN EQ exp

    LPAREN  shift, and go to state 114


State 81

   72 vardec: VAR ID . ASSIGN exp
   73       | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 115
    ASSIGN  shift, and go to state 116


State 82

   77 namety: TYPE ID . EQ ID
   78       | TYPE ID . EQ LBRACE fieldList RBRACE
   79       | TYPE ID . EQ ARRAY OF ID

    EQ  shift, and go to state 117


State 83

   60 letExp: LET decs IN . seqList END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 34
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    seqList          go to state 118
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 84

   63 decs: dec decs .

    $default  reduce using rule 63 (decs)


State 85

   69 funcdecList: funcdec_ funcdecList .

    $default  reduce using rule 69 (funcdecList)


State 86

   76 nametyList: namety nametyList .

    $default  reduce using rule 76 (nametyList)


State 87

    3 lvalue: lvalue DOT ID .

    $default  reduce using rule 3 (lvalue)


State 88

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   54 assignExp: lvalue ASSIGN exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION]

    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 54 (assignExp)


State 89

    4 lvalue: lvalue EXCLAMATION exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION]
   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 4 (lvalue)


State 90

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   41            | exp OR exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR]

    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 41 (binaryOpExp)


State 91

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   40            | exp AND exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND]
   41            | exp . OR exp

    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 40 (binaryOpExp)


State 92

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   34            | exp EQ exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND]
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 34 (binaryOpExp)


State 93

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   35            | exp NEQ exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND]
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 35 (binaryOpExp)


State 94

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   36            | exp LT exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND]
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 36 (binaryOpExp)


State 95

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   37            | exp LE exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND]
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 37 (binaryOpExp)


State 96

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   38            | exp GT exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND]
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 38 (binaryOpExp)


State 97

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   39            | exp GE exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND]
   40            | exp . AND exp
   41            | exp . OR exp

    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 39 (binaryOpExp)


State 98

   30 binaryOpExp: exp . PLUS exp
   30            | exp PLUS exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS]
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 30 (binaryOpExp)


State 99

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   31            | exp MINUS exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS]
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 31 (binaryOpExp)


State 100

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   32            | exp TIMES exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    $default  reduce using rule 32 (binaryOpExp)


State 101

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   33            | exp DIVIDE exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    $default  reduce using rule 33 (binaryOpExp)


State 102

   29 argList_: COMMA . exp argList_

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 119
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 103

   27 argList: exp argList_ .

    $default  reduce using rule 27 (argList)


State 104

   25 callExp: ID LPAREN argList RPAREN .

    $default  reduce using rule 25 (callExp)


State 105

   61 arrayCreateExp: ID LBRACK exp RBRACK . OF exp

    OF  shift, and go to state 120


State 106

   44 efield: ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 121
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 107

   48 efieldList_: COMMA . efield efieldList_

    ID  shift, and go to state 72

    efield  go to state 122


State 108

   46 efieldList: efield efieldList_ .

    $default  reduce using rule 46 (efieldList)


State 109

   43 recordCreateExp: ID LBRACE efieldList RBRACE .

    $default  reduce using rule 43 (recordCreateExp)


State 110

   53 seqList: exp SEMICOLON seqList .

    $default  reduce using rule 53 (seqList)


State 111

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   55 ifExp: IF exp THEN exp . ELSE exp
   56      | IF exp THEN exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]

    ELSE    shift, and go to state 123
    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    ELSE      [reduce using rule 56 (ifExp)]
    OR        [reduce using rule 56 (ifExp)]
    AND       [reduce using rule 56 (ifExp)]
    EQ        [reduce using rule 56 (ifExp)]
    NEQ       [reduce using rule 56 (ifExp)]
    LT        [reduce using rule 56 (ifExp)]
    LE        [reduce using rule 56 (ifExp)]
    GT        [reduce using rule 56 (ifExp)]
    GE        [reduce using rule 56 (ifExp)]
    PLUS      [reduce using rule 56 (ifExp)]
    MINUS     [reduce using rule 56 (ifExp)]
    TIMES     [reduce using rule 56 (ifExp)]
    DIVIDE    [reduce using rule 56 (ifExp)]
    $default  reduce using rule 56 (ifExp)


State 112

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   57 whileExp: WHILE exp DO exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]

    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    OR        [reduce using rule 57 (whileExp)]
    AND       [reduce using rule 57 (whileExp)]
    EQ        [reduce using rule 57 (whileExp)]
    NEQ       [reduce using rule 57 (whileExp)]
    LT        [reduce using rule 57 (whileExp)]
    LE        [reduce using rule 57 (whileExp)]
    GT        [reduce using rule 57 (whileExp)]
    GE        [reduce using rule 57 (whileExp)]
    PLUS      [reduce using rule 57 (whileExp)]
    MINUS     [reduce using rule 57 (whileExp)]
    TIMES     [reduce using rule 57 (whileExp)]
    DIVIDE    [reduce using rule 57 (whileExp)]
    $default  reduce using rule 57 (whileExp)


State 113

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   58 forExp: FOR ID ASSIGN exp . TO exp DO exp

    TO      shift, and go to state 124
    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68


State 114

   70 funcdec_: FUNCTION ID LPAREN . fieldList RPAREN COLON ID EQ exp
   71         | FUNCTION ID LPAREN . fieldList RPAREN EQ exp

    ID  shift, and go to state 125

    $default  reduce using rule 81 (fieldList)

    field      go to state 126
    fieldList  go to state 127


State 115

   73 vardec: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 128


State 116

   72 vardec: VAR ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 129
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 117

   77 namety: TYPE ID EQ . ID
   78       | TYPE ID EQ . LBRACE fieldList RBRACE
   79       | TYPE ID EQ . ARRAY OF ID

    ID      shift, and go to state 130
    LBRACE  shift, and go to state 131
    ARRAY   shift, and go to state 132


State 118

   60 letExp: LET decs IN seqList . END

    END  shift, and go to state 133


State 119

   29 argList_: COMMA exp . argList_
   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp

    COMMA   shift, and go to state 102
    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 28 (argList_)

    argList_  go to state 134


State 120

   61 arrayCreateExp: ID LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 135
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 121

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   44 efield: ID EQ exp .  [COMMA, RBRACE]

    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 44 (efield)


State 122

   48 efieldList_: COMMA efield . efieldList_

    COMMA  shift, and go to state 107

    $default  reduce using rule 47 (efieldList_)

    efieldList_  go to state 136


State 123

   55 ifExp: IF exp THEN exp ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 137
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 124

   58 forExp: FOR ID ASSIGN exp TO . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 138
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 125

   80 field: ID . COLON ID

    COLON  shift, and go to state 139


State 126

   82 fieldList: field . fieldList_

    COMMA  shift, and go to state 140

    $default  reduce using rule 83 (fieldList_)

    fieldList_  go to state 141


State 127

   70 funcdec_: FUNCTION ID LPAREN fieldList . RPAREN COLON ID EQ exp
   71         | FUNCTION ID LPAREN fieldList . RPAREN EQ exp

    RPAREN  shift, and go to state 142


State 128

   73 vardec: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 143


State 129

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   72 vardec: VAR ID ASSIGN exp .  [IN, FUNCTION, VAR, TYPE]

    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 72 (vardec)


State 130

   77 namety: TYPE ID EQ ID .

    $default  reduce using rule 77 (namety)


State 131

   78 namety: TYPE ID EQ LBRACE . fieldList RBRACE

    ID  shift, and go to state 125

    $default  reduce using rule 81 (fieldList)

    field      go to state 126
    fieldList  go to state 144


State 132

   79 namety: TYPE ID EQ ARRAY . OF ID

    OF  shift, and go to state 145


State 133

   60 letExp: LET decs IN seqList END .

    $default  reduce using rule 60 (letExp)


State 134

   29 argList_: COMMA exp argList_ .

    $default  reduce using rule 29 (argList_)


State 135

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   61 arrayCreateExp: ID LBRACK exp RBRACK OF exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]

    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    OR        [reduce using rule 61 (arrayCreateExp)]
    AND       [reduce using rule 61 (arrayCreateExp)]
    EQ        [reduce using rule 61 (arrayCreateExp)]
    NEQ       [reduce using rule 61 (arrayCreateExp)]
    LT        [reduce using rule 61 (arrayCreateExp)]
    LE        [reduce using rule 61 (arrayCreateExp)]
    GT        [reduce using rule 61 (arrayCreateExp)]
    GE        [reduce using rule 61 (arrayCreateExp)]
    PLUS      [reduce using rule 61 (arrayCreateExp)]
    MINUS     [reduce using rule 61 (arrayCreateExp)]
    TIMES     [reduce using rule 61 (arrayCreateExp)]
    DIVIDE    [reduce using rule 61 (arrayCreateExp)]
    $default  reduce using rule 61 (arrayCreateExp)


State 136

   48 efieldList_: COMMA efield efieldList_ .

    $default  reduce using rule 48 (efieldList_)


State 137

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   55 ifExp: IF exp THEN exp ELSE exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]

    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    OR        [reduce using rule 55 (ifExp)]
    AND       [reduce using rule 55 (ifExp)]
    EQ        [reduce using rule 55 (ifExp)]
    NEQ       [reduce using rule 55 (ifExp)]
    LT        [reduce using rule 55 (ifExp)]
    LE        [reduce using rule 55 (ifExp)]
    GT        [reduce using rule 55 (ifExp)]
    GE        [reduce using rule 55 (ifExp)]
    PLUS      [reduce using rule 55 (ifExp)]
    MINUS     [reduce using rule 55 (ifExp)]
    TIMES     [reduce using rule 55 (ifExp)]
    DIVIDE    [reduce using rule 55 (ifExp)]
    $default  reduce using rule 55 (ifExp)


State 138

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   58 forExp: FOR ID ASSIGN exp TO exp . DO exp

    DO      shift, and go to state 146
    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68


State 139

   80 field: ID COLON . ID

    ID  shift, and go to state 147


State 140

   84 fieldList_: COMMA . field fieldList_

    ID  shift, and go to state 125

    field  go to state 148


State 141

   82 fieldList: field fieldList_ .

    $default  reduce using rule 82 (fieldList)


State 142

   70 funcdec_: FUNCTION ID LPAREN fieldList RPAREN . COLON ID EQ exp
   71         | FUNCTION ID LPAREN fieldList RPAREN . EQ exp

    COLON  shift, and go to state 149
    EQ     shift, and go to state 150


State 143

   73 vardec: VAR ID COLON ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 151
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 144

   78 namety: TYPE ID EQ LBRACE fieldList . RBRACE

    RBRACE  shift, and go to state 152


State 145

   79 namety: TYPE ID EQ ARRAY OF . ID

    ID  shift, and go to state 153


State 146

   58 forExp: FOR ID ASSIGN exp TO exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 154
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 147

   80 field: ID COLON ID .

    $default  reduce using rule 80 (field)


State 148

   84 fieldList_: COMMA field . fieldList_

    COMMA  shift, and go to state 140

    $default  reduce using rule 83 (fieldList_)

    fieldList_  go to state 155


State 149

   70 funcdec_: FUNCTION ID LPAREN fieldList RPAREN COLON . ID EQ exp

    ID  shift, and go to state 156


State 150

   71 funcdec_: FUNCTION ID LPAREN fieldList RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 157
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 151

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   73 vardec: VAR ID COLON ID ASSIGN exp .  [IN, FUNCTION, VAR, TYPE]

    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 73 (vardec)


State 152

   78 namety: TYPE ID EQ LBRACE fieldList RBRACE .

    $default  reduce using rule 78 (namety)


State 153

   79 namety: TYPE ID EQ ARRAY OF ID .

    $default  reduce using rule 79 (namety)


State 154

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   58 forExp: FOR ID ASSIGN exp TO exp DO exp .  [$end, COMMA, SEMICOLON, RPAREN, RBRACK, RBRACE, DOT, ASSIGN, THEN, ELSE, TO, IN, END, DO, FUNCTION, VAR, TYPE, EXCLAMATION, OR, AND, EQ, NEQ, LT, LE, GT, GE, PLUS, MINUS, TIMES, DIVIDE]

    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    OR        [reduce using rule 58 (forExp)]
    AND       [reduce using rule 58 (forExp)]
    EQ        [reduce using rule 58 (forExp)]
    NEQ       [reduce using rule 58 (forExp)]
    LT        [reduce using rule 58 (forExp)]
    LE        [reduce using rule 58 (forExp)]
    GT        [reduce using rule 58 (forExp)]
    GE        [reduce using rule 58 (forExp)]
    PLUS      [reduce using rule 58 (forExp)]
    MINUS     [reduce using rule 58 (forExp)]
    TIMES     [reduce using rule 58 (forExp)]
    DIVIDE    [reduce using rule 58 (forExp)]
    $default  reduce using rule 58 (forExp)


State 155

   84 fieldList_: COMMA field fieldList_ .

    $default  reduce using rule 84 (fieldList_)


State 156

   70 funcdec_: FUNCTION ID LPAREN fieldList RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 158


State 157

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   71 funcdec_: FUNCTION ID LPAREN fieldList RPAREN EQ exp .  [IN, FUNCTION, VAR, TYPE]

    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 71 (funcdec_)


State 158

   70 funcdec_: FUNCTION ID LPAREN fieldList RPAREN COLON ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    IF      shift, and go to state 5
    WHILE   shift, and go to state 6
    FOR     shift, and go to state 7
    LET     shift, and go to state 8
    BREAK   shift, and go to state 9
    NIL     shift, and go to state 10
    MINUS   shift, and go to state 11

    lvalue           go to state 13
    exp              go to state 159
    varExp           go to state 15
    nilExp           go to state 16
    intExp           go to state 17
    stringExp        go to state 18
    callExp          go to state 19
    binaryOpExp      go to state 20
    unaryOpExp       go to state 21
    recordCreateExp  go to state 22
    seqExp           go to state 23
    assignExp        go to state 24
    ifExp            go to state 25
    whileExp         go to state 26
    forExp           go to state 27
    breakExp         go to state 28
    letExp           go to state 29
    arrayCreateExp   go to state 30


State 159

   30 binaryOpExp: exp . PLUS exp
   31            | exp . MINUS exp
   32            | exp . TIMES exp
   33            | exp . DIVIDE exp
   34            | exp . EQ exp
   35            | exp . NEQ exp
   36            | exp . LT exp
   37            | exp . LE exp
   38            | exp . GT exp
   39            | exp . GE exp
   40            | exp . AND exp
   41            | exp . OR exp
   70 funcdec_: FUNCTION ID LPAREN fieldList RPAREN COLON ID EQ exp .  [IN, FUNCTION, VAR, TYPE]

    OR      shift, and go to state 57
    AND     shift, and go to state 58
    EQ      shift, and go to state 59
    NEQ     shift, and go to state 60
    LT      shift, and go to state 61
    LE      shift, and go to state 62
    GT      shift, and go to state 63
    GE      shift, and go to state 64
    PLUS    shift, and go to state 65
    MINUS   shift, and go to state 66
    TIMES   shift, and go to state 67
    DIVIDE  shift, and go to state 68

    $default  reduce using rule 70 (funcdec_)
